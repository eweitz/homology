/*! Homology.js, version 0.0.1.  Developed by Eric Weitz.  https://github.com/eweitz/homology.  Public domain (CC0 1.0). */
!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var o=e();for(var r in o)("object"==typeof exports?exports:t)[r]=o[r]}}(window,function(){return function(t){var e={};function o(r){if(e[r])return e[r].exports;var n=e[r]={i:r,l:!1,exports:{}};return t[r].call(n.exports,n,n.exports,o),n.l=!0,n.exports}return o.m=t,o.c=e,o.d=function(t,e,r){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)o.d(r,n,function(e){return t[e]}.bind(null,n));return r},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="/dist",o(o.s=0)}([function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,n=o(1),a=(r=n)&&r.__esModule?r:{default:r};window.fetchOrthologs=a.default,e.default=a.default},function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=a(o(2)),n=a(o(3));function a(t){return t&&t.__esModule?t:{default:t}}e.default=async function(t,e,o,a="oma"){return"oma"===a?await(0,r.default)(t,e,o):"orthodb"===a?await(0,n.default)(t,e,o):void 0}},function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r="https://omabrowser.org/api";function n(t,e=null,o=null,r=null,n=null){var a,i,u;throw a={geneNotFound:'Gene "'+o+'" not found in '+r,orthologsNotFound:'Orthologs not found for gene "'+o+'"',orthologsNotFoundInTarget:'Orthologs not found for gene "'+o+'" in target organism '+n},u=e?`<small>${e.message}</small>`:"",i=`<span id="error-container">\n    <b>Error</b>: ${a[t]}.<br/>\n    ${u}\n    </span>`.replace("Error: ",""),Error(i)}e.default=async function(t,e,o){var a,i,u,s,l,c,f,d;t=t.toLowerCase();try{a=await async function(t,e){var o,r,n,a,i,u,s,l;for(o="https://www.uniprot.org/uniprot/?format=tab&"+(i="columns=id,entry name,genes")+"&sort=score",r="&query=gene:"+t+"+AND+organism:"+e,n=await fetch(o+r),a=(await n.text()).split("\n").slice(1,-1),u=0;u<a.length;u++)if(s=(i=a[u].split("\t"))[2].split(" ").map(t=>t.toLowerCase()),l=i[0],s.includes(t))return l;throw Error('No Uniprot entry found for gene name "'+t+'" in organism "'+e+'"')}(t,e),i=await async function(t){var e,o,n;if(e=r+"/protein/"+t+"/",o=await fetch(e),n=await o.json(),404===o.status)throw Error('OMA protein not found for Uniprot protein "'+t+'".');return n}(a)}catch(f){n("geneNotFound",f,t,e,[o])}try{u=await async function(t){var e,o,n;if(e=r+"/protein/"+t+"/orthologs/",o=await fetch(e),n=await o.json(),404===o.status)throw Error('OMA orthologs not found for Uniprot protein "'+t+'".');return n}(a)}catch(f){n("orthologsNotFound",f)}return d=o.map(t=>(function(t){var e,o;return"homo sapiens"===t?"HUMAN":"mus musculus"===t?"MOUSE":([e,o]=t.split(" "),(e.slice(0,3)+o.slice(0,2)).toUpperCase())})(t)),0===(c=u.filter(t=>(s=t.omaid,l=s.slice(0,5),d.includes(l)))).length&&n("orthologsNotFoundInTarget",void 0),c.unshift(i),c=c.map(t=>t.chromosome+":"+t.locus.start+"-"+t.locus.end)}},function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r="https://homology-api.firebaseapp.com/orthodb",n="https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi?db=gene&version=2.0&retmode=json";async function a(t){var e=await fetch(r+t);return(await e.json()).data}async function i(t){var e=t.gene_id.param,o=(await a("/ogdetails?id="+e)).entrez[0].id;return await async function(t){var e,o,r;return e=await fetch(n+"&id="+t),(r=(o=(await e.json()).result)[o.uids[0]].genomicinfo[0]).chrloc+":"+r.chrstart+"-"+r.chrstop}(o)}e.default=async function(t,e,o){var r,n,u=[];r=(await a("/search?query="+t))[0],(await a("/orthologs?id="+r+"&species=all")).forEach(t=>{var r=t.organism.name.toLowerCase();e===r&&(n=t),o.includes(r)&&u.push(t)});var s,l=await i(n.genes[0]);return(s=(s=await Promise.all(u.map(async t=>await Promise.all(t.genes.map(async t=>i(t))))))[0]).unshift(l),s}}])});
//# sourceMappingURL=homology.min.js.map