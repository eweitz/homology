{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./src/index.js","webpack:///./src/homology.js"],"names":["root","factory","exports","module","define","amd","a","i","window","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_homology","fetchOrthologs","omaBase","reportError","error","errorObj","gene","org1","org2","summaries","textSummary","errorDetail","geneNotFound","orthologsNotFound","orthologsNotFoundInTarget","message","replace","Error","async","sourceOrg","targetOrgs","proteinId","sourceProtein","rawOrthologs","omaId","omaIdPrefix","orthologs","targetOrgPrefixes","toLowerCase","org","uniprotBase","query","response","lines","columns","genes","uniprotId","fetch","text","split","slice","length","map","includes","fetchUniprotId","omaUrl","data","json","status","fetchOmaProtein","fetchOmaOrthologs","genus","species","toUpperCase","getOmaIdPrefix","filter","rawOrtholog","omaid","unshift","chromosome","locus","start","end"],"mappings":";CAAA,SAAAA,EAAAC,GACA,oBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,SACA,sBAAAG,eAAAC,IACAD,OAAA,GAAAH,OACA,CACA,IAAAK,EAAAL,IACA,QAAAM,KAAAD,GAAA,iBAAAJ,gBAAAF,GAAAO,GAAAD,EAAAC,IAPA,CASCC,OAAA,WACD,mBCTA,IAAAC,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAT,QAGA,IAAAC,EAAAM,EAAAE,GAAA,CACAJ,EAAAI,EACAC,GAAA,EACAV,QAAA,IAUA,OANAW,EAAAF,GAAAG,KAAAX,EAAAD,QAAAC,IAAAD,QAAAQ,GAGAP,EAAAS,GAAA,EAGAT,EAAAD,QA0DA,OArDAQ,EAAAK,EAAAF,EAGAH,EAAAM,EAAAP,EAGAC,EAAAO,EAAA,SAAAf,EAAAgB,EAAAC,GACAT,EAAAU,EAAAlB,EAAAgB,IACAG,OAAAC,eAAApB,EAAAgB,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CT,EAAAe,EAAA,SAAAvB,GACA,oBAAAwB,eAAAC,aACAN,OAAAC,eAAApB,EAAAwB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAApB,EAAA,cAAiD0B,OAAA,KAQjDlB,EAAAmB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAlB,EAAAkB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAvB,EAAAe,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAlB,EAAAO,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAtB,EAAA0B,EAAA,SAAAjC,GACA,IAAAgB,EAAAhB,KAAA4B,WACA,WAA2B,OAAA5B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAO,EAAAO,EAAAE,EAAA,IAAAA,GACAA,GAIAT,EAAAU,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD5B,EAAA+B,EAAA,QAIA/B,IAAAgC,EAAA,mFClFA,MAAAC,EAAAjC,EAAA,uCAGAF,OAAOoC,eAAiBA,oBAGTA,yFCNf,IAAIC,EAAU,6BAkGd,SAASC,EAAYC,EAAOC,EAAS,KAAMC,EAAK,KAAMC,EAAK,KAAMC,EAAK,MACpE,IAAIC,EAAwBC,EAAaC,EAgBzC,MAdAF,EAAY,CACRG,aAAgB,SAAWN,EAAO,kBAAoBC,EACtDM,kBAAqB,iCAAmCP,EAAO,IAC/DQ,0BACE,iCAAmCR,EAAO,wBAA0BE,GAE1EG,EAAcN,YAAqBA,EAASU,kBAAoB,GAOhEL,oDAJkBD,EAAUL,iBACxBO,iBAGsBK,QAAQ,UAAW,IACvCC,MAAMP,aAQdQ,eAA8BZ,EAAMa,EAAWC,GAC7C,IAAIC,EAAWC,EAAeC,EAAcC,EAAOC,EACjDC,EAAWtB,EAAOuB,EAEpBrB,EAAOA,EAAKsB,cACZ,IACEP,QA3HJH,eAA8BZ,EAAMuB,GAClC,IAAIC,EAA6BC,EAAOC,EAAgBC,EAAOC,EAC7DtE,EAAGuE,EAAOC,EAmBZ,IAVAN,EACE,gDAJFI,EAAU,+BAKR,cAGFH,EAAQ,eAAiBzB,EAAO,iBAAmBuB,EACnDG,QAAiBK,MAAMP,EAAcC,GAErCE,SADaD,EAASM,QACTC,MAAM,MAAMC,MAAM,GAAI,GAE9B5E,EAAI,EAAGA,EAAIqE,EAAMQ,OAAQ7E,IAM5B,GAJAuE,GADAD,EAAUD,EAAMrE,GAAG2E,MAAM,OACT,GAAGA,MAAM,KAAKG,IAAIpE,GAAKA,EAAEsD,eACzCQ,EAAYF,EAAQ,GAGhBC,EAAMQ,SAASrC,GAAO,OAAO8B,EAGnC,MAAMnB,MACJ,yCAA2CX,EAAO,kBAChCuB,EAAM,KA2FNe,CAAetC,EAAMa,GACvCG,QArEJJ,eAA+BkB,GAC7B,IAAIS,EAAQb,EAAUc,EAItB,GAHAD,EAAS3C,EAAU,YAAckC,EAAY,IAC7CJ,QAAiBK,MAAMQ,GACvBC,QAAad,EAASe,OACE,MAApBf,EAASgB,OACX,MAAM/B,MACJ,8CAAgDmB,EAAY,MAGhE,OAAOU,EA2DiBG,CAAgB5B,GACtC,MAAMjB,GACND,EAAY,eAAgBC,EAAOE,EAAMa,EAAW,CAACC,IAEvD,IACEG,QA1FJL,eAAiCkB,GAC/B,IAAIS,EAAQb,EAAUc,EAItB,GAHAD,EAAS3C,EAAU,YAAckC,EAAY,cAC7CJ,QAAiBK,MAAMQ,GACvBC,QAAad,EAASe,OACE,MAApBf,EAASgB,OACX,MAAM/B,MACJ,gDAAkDmB,EAAY,MAGlE,OAAOU,EAgFgBI,CAAkB7B,GACvC,MAAMjB,GACND,EAAY,oBAAqBC,GAsBnC,OAlBAuB,EAAoBP,EAAWsB,IAAIb,IA/DrC,SAAwBA,GAOtB,IAAYsB,EAAOC,EACnB,MAAY,iBAARvB,EACK,QACU,iBAARA,EACF,UAENsB,EAAOC,GAAWvB,EAAIU,MAAM,MACpBY,EAAMX,MAAM,EAAG,GAAKY,EAAQZ,MAAM,EAAG,IAC9Ba,gBAgDwBC,CAAezB,IAQhC,KANzBH,EAAYH,EAAagC,OAAOC,IAC9BhC,EAAQgC,EAAYC,MACpBhC,EAAcD,EAAMgB,MAAM,EAAG,GACtBb,EAAkBgB,SAASlB,MAGtBgB,QACZtC,EAAY,iCAzBDC,GA4BbsB,EAAUgC,QAAQpC,GAElBI,EAAYA,EAAUgB,IAAIpE,GACjBA,EAAEqF,WAAa,IAAMrF,EAAEsF,MAAMC,MAAQ,IAAMvF,EAAEsF,MAAME","file":"homology.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import fetchOrthologs from './homology';\n\n// Enable references to Ideogram when loaded via traditional script tag\nwindow.fetchOrthologs = fetchOrthologs;\n\n// Enable references to Ideogram when imported as an ES6 module\nexport default fetchOrthologs;\n","var omaBase = 'https://omabrowser.org/api';\n\n/**\n  * Query Uniprot API for protein entry ID (e.g. P53_RAT) given gene and\n  * organism.  This output is needed as input for the OMA API.\n  */\nasync function fetchUniprotId(gene, org) {\n  var uniprotBase, columns, query, query, response, data, lines, columns,\n    i, genes, uniprotId;\n\n  // Selected headers:\n  //   - Entry, Entry name, Gene names\n  // Default headers (omit `columns` parameter):\n  //   - Entry, Entry name, Status, Protein names, Gene names, Organism, Length\n  columns = 'columns=id,entry name,genes';\n\n  // API docs: https://www.uniprot.org/help/api_queries\n  uniprotBase = (\n    'https://www.uniprot.org/uniprot/?format=tab&' + columns +\n    '&sort=score'\n  );\n\n  query = '&query=gene:' + gene + '+AND+organism:' + org;\n  response = await fetch(uniprotBase + query);\n  data = await response.text();\n  lines = data.split('\\n').slice(1, -1); // Omit headers, empty last line\n\n  for (i = 0; i < lines.length; i++) {\n    columns = lines[i].split('\\t');\n    genes = columns[2].split(' ').map(d => d.toLowerCase()); // e.g. tp53\n    uniprotId = columns[0]; // e.g. P53_RAT\n    // uniprotName = columns[1]; // e.g. P53_RAT\n\n    if (genes.includes(gene)) return uniprotId;\n  }\n\n  throw Error(\n    'No Uniprot entry found for gene name \"' + gene + '\" ' +\n    'in organism \"' + org + '\"'\n  );\n}\n\n/**\n  * Query OMA API for orthology information on a protein \n  */\nasync function fetchOmaOrthologs(uniprotId) {\n  var omaUrl, response, data;\n  omaUrl = omaBase + '/protein/' + uniprotId + '/orthologs/';\n  response = await fetch(omaUrl);\n  data = await response.json();\n  if (response.status === 404) {\n    throw Error(\n      'OMA orthologs not found for Uniprot protein \"' + uniprotId + '\".'\n    );\n  }\n  return data;\n}\n\n/**\n  * Query OMA API for information on a protein \n  */\nasync function fetchOmaProtein(uniprotId) {\n  var omaUrl, response, data;\n  omaUrl = omaBase + '/protein/' + uniprotId + '/';\n  response = await fetch(omaUrl);\n  data = await response.json();\n  if (response.status === 404) {\n    throw Error(\n      'OMA protein not found for Uniprot protein \"' + uniprotId + '\".'\n    );\n  }\n  return data;\n}\n\n/**\n  * Convert organism scientific name to OMA ID prefix.\n  * Example: \"rattus-norvegicus -> \"RATNO\" \n  */\nfunction getOmaIdPrefix(org) {\n  // If this function proves inadequate, then refactor to use\n  // https://omabrowser.org/api/taxonomy/.  Fetch on page load, collapse\n  // tree, return leaf nodes as object with `name` as keys and `code` as\n  // values.\n  //\n  // As is, the implementation below seems adequate, simpler, and faster.\n  var prefix, genus, species;\n  if (org === 'homo sapiens') {\n    return 'HUMAN';\n  } else if (org === 'mus musculus') {\n    return 'MOUSE';\n  } else {\n    [genus, species] = org.split(' ');\n    prefix = genus.slice(0, 3) + species.slice(0, 2);\n    prefix = prefix.toUpperCase();\n    return prefix;\n  }\n}\n\nfunction reportError(error, errorObj=null, gene=null, org1=null, org2=null) {\n  var summaries, htmlSummary, textSummary, errorDetail;\n\n  summaries = {\n      'geneNotFound': 'Gene \"' + gene + '\" not found in ' + org1,\n      'orthologsNotFound': 'Orthologs not found for gene \"' + gene + '\"',\n      'orthologsNotFoundInTarget':\n        'Orthologs not found for gene \"' + gene + '\" in target organism ' + org2\n  }\n  errorDetail = errorObj ? `<small>${errorObj.message}</small>` : '';\n  htmlSummary =\n    `<span id=\"error-container\">\n    <b>Error</b>: ${summaries[error]}.<br/>\n    ${errorDetail}\n    </span>`;\n  // statusContainer.innerHTML = htmlSummary;\n  textSummary = htmlSummary.replace('Error: ', '');\n  throw Error(textSummary);\n}\n\n/**\n  * Given a gene in a source organism, retrieve its orthologs in\n  * a list of other organisms.  Returns OMA protein records for\n  * source and target organisms.\n  */\nasync function fetchOrthologs(gene, sourceOrg, targetOrgs) {\n  var proteinId, sourceProtein, rawOrthologs, omaId, omaIdPrefix,\n    orthologs, error, targetOrgPrefixes;\n\n  gene = gene.toLowerCase();\n  try {\n    proteinId = await fetchUniprotId(gene, sourceOrg);\n    sourceProtein = await fetchOmaProtein(proteinId);\n  } catch(error) {\n    reportError('geneNotFound', error, gene, sourceOrg, [targetOrgs]);\n  }\n  try {\n    rawOrthologs = await fetchOmaOrthologs(proteinId);\n  } catch(error) {\n    reportError('orthologsNotFound', error);\n  }\n\n  // Get OMA ID prefixes for each target organism\n  targetOrgPrefixes = targetOrgs.map(org => getOmaIdPrefix(org));\n\n  orthologs = rawOrthologs.filter(rawOrtholog => {\n    omaId = rawOrtholog.omaid; // e.g. RATNO03710\n    omaIdPrefix = omaId.slice(0, 5); // e.g. RATNO\n    return targetOrgPrefixes.includes(omaIdPrefix);\n  });\n\n  if (orthologs.length === 0) {\n    reportError('orthologsNotFoundInTarget', error);\n  }\n\n  orthologs.unshift(sourceProtein); // prepend to array\n\n  orthologs = orthologs.map(d => {\n    return d.chromosome + ':' + d.locus.start + '-' + d.locus.end\n  });\n\n  return orthologs;\n}\n\nexport default fetchOrthologs;"],"sourceRoot":""}