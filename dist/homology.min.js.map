{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./src/error.js","webpack:///./src/index.js","webpack:///./src/homology.js","webpack:///./src/oma.js","webpack:///./src/orthodb.js"],"names":["root","factory","exports","module","define","amd","a","i","window","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","normalizeOrganismName","genusSpecies","split","toUpperCase","slice","join","reportError","error","errorObj","gene","org1","org2","summaries","detail","geneNotFound","orthologsNotFound","orthologsNotFoundInTarget","message","Error","_homology","fetchOrthologs","async","genes","sourceOrg","targetOrgs","api","_oma2","default","_orthodb2","_error","omaBase","fetchUniprotId","org","uniprotBase","query","response","lines","columns","uniprotId","fetch","text","length","map","toLowerCase","includes","fetchOmaOrthologs","omaUrl","data","json","status","fetchOmaProtein","getOmaIdPrefix","genus","species","proteinId","sourceProtein","rawOrthologs","omaId","omaIdPrefix","theseOrthologs","targetOrgPrefixes","orthologs","filter","rawOrtholog","omaid","unshift","chromosome","locus","start","end","push","orthodbBase","ncbiBase","fetchJson","path","fetchLocation","orthodbGene","ncbiGeneId","ogDetails","orthodbGeneId","gene_id","param","entrez","id","xrefs","forEach","xref","type","result","ginfo","uids","genomicinfo","chrloc","chrstart","chrstop","fetchGeneLocationFromEUtils","findBestOrtholog","orthologId","source","targets","hasSourceNameMatch","thisOrganism","organism","geneObj","thisGene","ids","j","locations","sourceGene","sourceLocation","targetLocation"],"mappings":"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","file":"homology.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/**\n * Converts an all-lowercase name to uppercase genus, lowercase species\n * Example: mus musculus -> Mus musculus\n */\nfunction normalizeOrganismName(name) {\n  var genusSpecies, genus, species;\n  genusSpecies = name.split(' ');\n\n  // e.g. mus -> Mus\n  genus = genusSpecies[0][0].toUpperCase() + genusSpecies[0].slice(1,);\n\n  // Account for subspecies name, e.g. Canis lupus familiaris\n  species = genusSpecies.slice(1,).join(' ');\n\n  return genus + ' ' + species;\n}\n\nfunction reportError(error, errorObj=null, gene=null, org1=null, org2=null) {\n  var summaries, summary, detail;\n\n  if (org1 !== null) org1 = normalizeOrganismName(org1);\n  if (org2 !== null) org2 = normalizeOrganismName(org2[0]);\n\n  summaries = {\n      'geneNotFound': `Gene \"${gene}\" not found in \"${org1}\"`,\n      'orthologsNotFound': `Orthologs not found for gene \"${gene}\"`,\n      'orthologsNotFoundInTarget':\n        `Orthologs not found for gene \"${gene}\" in target organism \"${org2}\"`\n  }\n  detail = errorObj ? `<br/><small>${errorObj.message}</small>` : '';\n  summary = summaries[error] + detail\n  throw new Error(summary);\n}\n\nexport {reportError}","import fetchOrthologs from './homology';\n\n// Enable references to Ideogram when loaded via traditional script tag\nwindow.fetchOrthologs = fetchOrthologs;\n\n// Enable references to Ideogram when imported as an ES6 module\nexport default fetchOrthologs;\n","import fetchOrthologsFromOma from './oma';\nimport fetchOrthologsFromOrthodb from './orthodb';\n\nasync function fetchOrthologs(genes, sourceOrg, targetOrgs, api='oma') {\n  if (api === 'oma') {\n    return await fetchOrthologsFromOma(genes, sourceOrg, targetOrgs);\n  } else if (api === 'orthodb') {\n    return await fetchOrthologsFromOrthodb(genes, sourceOrg, targetOrgs);\n  }\n}\n\nexport default fetchOrthologs","/**\n * @fileoverview Client library for OMA (Orthology MAtrix)\n * API docs: https://omabrowser.org/api/docs\n *\n * This module supports fetching orthologs from OMA.  All functions here\n * support the single exported function `fetchOrthologsFromOma`.\n */\n\nimport {reportError} from './error';\n\nvar omaBase = 'https://omabrowser.org/api';\n\n/**\n  * Query Uniprot API for protein entry ID (e.g. P53_RAT) given gene and\n  * organism.  This output is needed as input for the OMA API.\n  */\nasync function fetchUniprotId(gene, org) {\n  var uniprotBase, columns, query, query, response, data, lines, columns,\n    i, genes, uniprotId;\n\n  // Selected headers:\n  //   - Entry, Entry name, Gene names\n  // Default headers (omit `columns` parameter):\n  //   - Entry, Entry name, Status, Protein names, Gene names, Organism, Length\n  columns = 'columns=id,entry name,genes';\n\n  // API docs: https://www.uniprot.org/help/api_queries\n  uniprotBase = (\n    'https://www.uniprot.org/uniprot/?format=tab&' + columns +\n    '&sort=score'\n  );\n\n  query = '&query=gene:' + gene + '+AND+organism:' + org;\n  response = await fetch(uniprotBase + query);\n  data = await response.text();\n  lines = data.split('\\n').slice(1, -1); // Omit headers, empty last line\n\n  for (i = 0; i < lines.length; i++) {\n    columns = lines[i].split('\\t');\n    genes = columns[2].split(' ').map(d => d.toLowerCase()); // e.g. tp53\n    uniprotId = columns[0]; // e.g. P53_RAT\n    // uniprotName = columns[1]; // e.g. P53_RAT\n\n    if (genes.includes(gene.toLowerCase())) return uniprotId;\n  }\n\n  throw Error(\n    'No Uniprot entry found for gene name \"' + gene + '\" ' +\n    'in organism \"' + org + '\"'\n  );\n}\n\n/**\n  * Query OMA API for orthology information on a protein \n  */\nasync function fetchOmaOrthologs(uniprotId) {\n  var omaUrl, response, data;\n  omaUrl = omaBase + '/protein/' + uniprotId + '/orthologs/';\n  response = await fetch(omaUrl);\n  data = await response.json();\n  if (response.status === 404) {\n    throw Error(\n      'OMA orthologs not found for Uniprot protein \"' + uniprotId + '\".'\n    );\n  }\n  return data;\n}\n\n/**\n  * Query OMA API for information on a protein\n  */\nasync function fetchOmaProtein(uniprotId) {\n  var omaUrl, response, data;\n  omaUrl = omaBase + '/protein/' + uniprotId + '/';\n  response = await fetch(omaUrl);\n  data = await response.json();\n  if (response.status === 404) {\n    throw Error(\n      'OMA protein not found for Uniprot protein \"' + uniprotId + '\".'\n    );\n  }\n  return data;\n}\n\n/**\n  * Convert organism scientific name to OMA ID prefix.\n  * Example: \"rattus-norvegicus -> \"RATNO\"\n  */\nfunction getOmaIdPrefix(org) {\n  // If this function proves inadequate, then refactor to use\n  // https://omabrowser.org/api/taxonomy/.  Fetch on page load, collapse\n  // tree, return leaf nodes as object with `name` as keys and `code` as\n  // values.\n  //\n  // As is, the implementation below seems adequate, simpler, and faster.\n  var prefix, genus, species;\n  if (org === 'homo sapiens') {\n    return 'HUMAN';\n  } else if (org === 'mus musculus') {\n    return 'MOUSE';\n  } else {\n    [genus, species] = org.split(' ');\n    prefix = genus.slice(0, 3) + species.slice(0, 2);\n    prefix = prefix.toUpperCase();\n    return prefix;\n  }\n}\n\n/**\n  * Given genes in a source organism, retrieve their orthologs in\n  * other organisms.  Returns OMA protein records for source and target\n  * organisms.\n  */\nasync function fetchOrthologsFromOma(genes, sourceOrg, targetOrgs) {\n  var proteinId, sourceProtein, rawOrthologs, omaId, omaIdPrefix,\n    theseOrthologs, error, targetOrgPrefixes, i, gene,\n    orthologs = [];\n\n  for (i = 0; i < genes.length; i++) {\n    gene = genes[i];\n    try {\n      proteinId = await fetchUniprotId(gene, sourceOrg);\n      sourceProtein = await fetchOmaProtein(proteinId);\n    } catch(error) {\n      reportError('geneNotFound', error, gene, sourceOrg, targetOrgs);\n    }\n    try {\n      rawOrthologs = await fetchOmaOrthologs(proteinId);\n    } catch(error) {\n      reportError('orthologsNotFound', error, gene, sourceOrg, targetOrgs);\n    }\n\n    // Get OMA ID prefixes for each target organism\n    targetOrgPrefixes = targetOrgs.map(org => getOmaIdPrefix(org));\n\n    theseOrthologs = rawOrthologs.filter(rawOrtholog => {\n      omaId = rawOrtholog.omaid; // e.g. RATNO03710\n      omaIdPrefix = omaId.slice(0, 5); // e.g. RATNO\n      return targetOrgPrefixes.includes(omaIdPrefix);\n    });\n\n    if (theseOrthologs.length === 0) {\n      reportError('orthologsNotFoundInTarget', error, gene, sourceOrg, targetOrgs);\n    }\n\n    theseOrthologs.unshift(sourceProtein); // prepend to array\n\n    theseOrthologs = theseOrthologs.map(d => {\n      return d.chromosome + ':' + d.locus.start + '-' + d.locus.end\n    });\n    orthologs.push(theseOrthologs);\n  }\n\n  return orthologs;\n}\n\nexport default fetchOrthologsFromOma;","/**\n* @fileoverview Client library for OrthoDB\n* API docs: https://www.orthodb.org/?page=api\n*\n* This module supports fetching orthologs from OMA.  All functions here\n* support the single exported function `fetchOrthologsFromOrthoDb`.\n*/\n\nimport {reportError} from './error';\n\n// OrthoDB does not support CORS.  Homology API on Firebase proxies OrthoDB and\n// supports CORS.  This enables client-side web requests to the OrthoDB API.\n//\n// var orthodbBase = 'https://www.orthodb.org';\nvar orthodbBase = 'https://homology-api.firebaseapp.com/orthodb';\n// var orthodbBase = 'http://localhost:5000/orthodb';\n\nvar apiKey = '&api_key=e7ce8adecd69d0457df7ec2ccbb704c4e709';\n\nvar ncbiBase =\n  'https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi' +\n  '?db=gene&retmode=json' + apiKey;\n\n/**\n * Get JSON response from OrthoDB API\n */\nasync function fetchJson(path) {\n  var response = await fetch(orthodbBase + path);\n  var json = await response.json();\n  return json.data;\n}\n\n/**\n * Get genomic coordinates of a gene using its NCBI Gene ID\n */\nasync function fetchGeneLocationFromEUtils(ncbiGeneId) {\n  var response, data, result, ginfo, location;\n  // Example:\n  // https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi?db=gene&retmode=json&id=3565955\n  response = await fetch(ncbiBase + '&id=' + ncbiGeneId);\n  data = await response.json();\n  result = data.result;\n  ginfo = result[result.uids[0]].genomicinfo[0];\n  location = ginfo.chrloc + ':' + ginfo.chrstart + '-' + ginfo.chrstop;\n  return location;\n}\n\nasync function fetchLocation(orthodbGene) {\n  var ncbiGeneId, ogDetails, location,\n    orthodbGeneId = orthodbGene.gene_id.param;\n\n  // Example:\n  // https://homology-api.firebaseapp.com/orthodb/ogdetails?id=6239_0:0008da\n  ogDetails = await fetchJson('/ogdetails?id=' + orthodbGeneId);\n\n  if ('entrez' in ogDetails) {\n    ncbiGeneId = ogDetails.entrez[0].id;\n  } else {\n    // Occurs in Drosophila melanogaster, e.g.\n    // https://homology-api.firebaseapp.com/orthodb/ogdetails?id=7227_0:000534\n    ogDetails.xrefs.forEach(xref => {\n      if (xref.type === 'NCBIgene') ncbiGeneId = xref.name;\n    });\n  }\n\n  location = await fetchGeneLocationFromEUtils(ncbiGeneId);\n  return location;\n}\n\n/**\n * See if an ortholog matches a queried organism, and how well it matches\n */\nasync function findBestOrtholog(orthologId, gene, sourceOrg, targetOrgs) {\n  var source, rawOrthologs,\n    targets = [],\n    hasSourceNameMatch = false;\n\n  // Example:\n  // https://homology-api.firebaseapp.com/orthodb/orthologs?id=1269806at2759&species=all\n  rawOrthologs = await fetchJson(`/orthologs?id=${orthologId}&species=all`);\n\n  rawOrthologs.forEach(rawOrtholog => {\n\n    // Is this ortholog record for the source organism?\n    var thisOrganism = rawOrtholog.organism.name.toLowerCase();\n    if (sourceOrg === thisOrganism) {\n      source = rawOrtholog;\n\n      // Do any genes in the record have a name matching the queried gene?\n      rawOrtholog.genes.forEach(geneObj => {\n        var thisGene = geneObj.gene_id.id.toLowerCase();\n        if (gene.toLowerCase() === thisGene) {\n          hasSourceNameMatch = true;\n        }\n      });\n    }\n\n    if (targetOrgs.includes(thisOrganism)) targets.push(rawOrtholog);\n  });\n\n  return [source, targets, hasSourceNameMatch];\n}\n\n/**\n * Get genomic locations of orthologs from OrthoDB\n *\n * For a gene in a source organism, find orthologs in target organisms and\n * return the genomic coordinates of the source gene and orthologous genes.\n *\n * Example:\n * fetchOrthologsFromOrthodb(\n *  'NFYA',\n *  'homo-sapiens',\n *  ['caenorhabditis-elegans']\n * );\n *\n * @param {String} gene Gene name\n * @param {String} sourceOrg Source organism name\n * @param {Array<String>} targetOrgs List of target organism names\n */\nasync function fetchOrthologsFromOrthodb(genes, sourceOrg, targetOrgs) {\n  var ids, i, j, id, source, gene, scope,\n    hasSourceNameMatch = false,\n    targets = [],\n    locations = [];\n\n  // 2759 is the NCBI Taxonomy ID for Eukaryota (eukaryote)\n  // https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?id=2759\n  var scope = \"&level=2759&species=9606\";\n\n  for (i = 0; i < genes.length; i++) {\n    gene = genes[i];\n    // Example:\n    // https://homology-api.firebaseapp.com/orthodb/search?query=NFYA&level=2759&species=2759\n    ids = await fetchJson('/search?query=' + gene + '&' + scope);\n\n    // Iterate through returned ortholog IDs\n    // Prefer orthologous pairs that have a gene name matching the queried gene\n    for (j = 0; j < ids.length; j++) {\n      id = ids[j];\n      [source, targets, hasSourceNameMatch] =\n        await findBestOrtholog(id, gene, sourceOrg, targetOrgs);\n      if (hasSourceNameMatch) break;\n    }\n\n    if (typeof source === 'undefined') {\n      reportError('orthologsNotFound', null, gene, sourceOrg, targetOrgs);\n    }\n    var sourceGene = source.genes.filter(geneObj => {\n      var thisGene = geneObj.gene_id.id.toLowerCase();\n      return gene.toLowerCase() === thisGene;\n    })[0];\n    var sourceLocation = await fetchLocation(sourceGene);\n\n    if (targets.length === 0) {\n      reportError('orthologsNotFoundInTarget', null, gene, sourceOrg, targetOrgs);\n    }\n\n    // NCBI rate limits prevent quickly fetching many gene locations, so\n    // simply locate the first gene in the first target.\n    // Example with many target hits this (over)simplifies:\n    // http://eweitz.github.io/ideogram/comparative-genomics?org=homo-sapiens&org2=mus-musculus&source=orthodb&gene=SAP30\n    var targetLocation = await fetchLocation(targets[0].genes[0]);\n\n    // TODO:\n    //  * Uncomment this when multi-target orthology support is implemented\n    //  * Implement exponential backoff and jitter to address rate limits\n    // var locations = await Promise.all(targets.map(async (target) => {\n    //   return await Promise.all(target.genes.map(async (gene) => {\n    //     return fetchLocation(gene);\n    //   }));\n    // }));\n    // locations = locations[0];\n    // locations.unshift(sourceLocation); // prepend to source to target array\n\n    locations.push([sourceLocation, targetLocation]);\n  }\n\n  return locations;\n}\n\nexport default fetchOrthologsFromOrthodb;"],"sourceRoot":""}